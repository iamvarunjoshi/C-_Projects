//Part-3

#include<iostream>
#include<deque>
#include<vector>
#include<stdlib.h>
#include<conio.h>
#include<time.h>

using namespace std;
//Road Crossing game
//Part-2


class cPlayer
{
public:
	int x, y;
	cPlayer(int width)
	{
		/*width is the width of the road*/
		x = width / 2;
		y = 0;
	}
};


class cLane {
private:
	std::deque<bool> cars;
	bool right;
	//true means there's car 
public:
	cLane(int width)
	{
		for (int i = 0; i < width; i++)
		{
			cars.push_front(true);
		}
		right = rand() % 2;
		//this will give zero or false randomly
	}

	/* we will push a car randomly and pop a car to maintain the width of ane*/
	void Move()
	{
		if (right)
		{
			if (rand() % 10 == 1)
				cars.push_front(true);
			else
				cars.push_front(false);

			cars.pop_back();
		}
		else {
			if (rand() % 10 == 1)
				cars.push_back(true);
			else
				cars.push_back(false);

			cars.pop_front();
		}
	}

	bool checkPos(int pos)
	{
		/*to check the position of car*/
		return cars[pos];
	}
	void ChangeDirection()
	{
		right != right;
	}

};

//our character is V and we need to cross the road


class cGame
{
private:
	bool quit;
	int numberofLanes;
	int width;
	int score;
	cPlayer* player;
	vector<cLane*>map;

public:

	cGame(int w = 20, int h = 10)
	{
		numberofLanes = h;
		width = w;
		quit = false;

		for (int i = 0; i < numberofLanes; i++)
		{
			map.push_back(new cLane(w));
		}
		player = new cPlayer(width);
	}
	~cGame()
	{
		delete player;
		for (int i = 0; i < map.size(); i++)
		{
			cLane* current = map.back();
			map.pop_back();
			delete current;
		}
	}

	void Draw()
	{
		system("cls");
		for (int i = 0; i < numberofLanes; i++)
		{
			for (int j = 0; j < width; j++)
			{
				/*we're avoiding last two index for overwriting of first and last lane*/
				if (i == 0 && (j == 0 || j == width - 1))cout << "S";
				if (i == numberofLanes - 1 && (j == 0 || j == width - 1))cout << "F";

				if (map[i]->checkPos(j) && i != 0 && i != numberofLanes - 1)
				{
					cout << "#";
				}
				else if (player->x == j && player->y == i)
					cout << "V";
				else
					cout << " ";
			}
			cout << endl;
		}
		cout << "Score:" << score;
	}
	void Input()
	{
		if (_kbhit())
		{
			char current = _getch();
			if (current == 'a')
				player->x--;
			if (current == 'd')
				player->x++;
			if (current == 'w')
				player->y--;
			if (current == 's')
				player->y++;
			if (current == 'q')
				quit = true;
		}
	}

	void Logic()
	{
		for (int i = 1; i < numberofLanes - 1; i++)
		{
			if (rand() % 10 == 1)
				map[i]->Move();

			if (map[i]->checkPos(player->x) && player->y == i)
				quit = true;

			if (player->y == numberofLanes - 1)
			{
				score++;
				player->y = 0;
				cout << "\x07";
				map[rand() % numberofLanes]->ChangeDirection();
			}

			// At player's x position there's a car 		
		}
	}
	void Run()
	{
		while (!quit)
		{
			Input();
			Draw();
			Logic();
		}
	}

};

int main()
{
	srand(time(NULL));
	cGame game(30, 5);
	game.Run();
	cout<<endl << "GameOver" << endl;
	getchar();
	return 0;
}
